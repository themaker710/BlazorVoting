@page "/sessions"
@page "/sessions/{DirectCode:int}"
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using PollAppHosted.Shared;

<PageTitle>Admin Dash</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Session Manager</MudText>
<MudText Class="mb-8">Prepare questions, view results, and send notifications from this page.</MudText>

<MudDivider />

@if (session is null)
{

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">Create Session</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @bind-IsValid="@success">
                <MudTextField Class="inline" T="string" @bind-Value="@sessionName" Label="Session Name" Required="true" />
                <MudTextField Class="inline" T="string" @bind-Value="@uname" Label="Name" HelperText="Optional" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success || _generatingSession)" @onclick="@(async () => await CreateSession())" Class="ml-auto inline">
                    @if (_generatingSession)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Create</MudText>
                    }
                </MudButton>
            </MudForm>
        </MudCardContent>
    </MudCard>
    <MudSpacer></MudSpacer>
}
else
{
    @if (!dismissConf)
    {
        //Alert confirm
        <MudAlert Severity="Severity.Success" ShowCloseIcon="true" CloseIconClicked="(() => dismissConf = true)">
            <MudText>Session created successfully with connection code <b>@session.ID</b></MudText>
        </MudAlert>
    }
    //Display session information including list of connected users

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">Session Info</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@EndConfirmation" Class="ml-auto inline">End Session</MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.h5" GutterBottom="true">Session Name: @session.Name</MudText>
            <MudText Typo="Typo.h5" GutterBottom="true">Connection Code: @session.ID</MudText>
            <MudText Typo="Typo.h5" GutterBottom="true">Connected Users: @session.users.Count</MudText>
            <MudText Typo="Typo.h5" GutterBottom="true">Created: @session.creationTime.ToString("t")</MudText>
        </MudCardContent>
    </MudCard>

    <MudSpacer></MudSpacer>

    //Create Poll with a dynamic amount of responses
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">Create Poll</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @bind-IsValid="@success">
                <MudTextField Class="inline" T="string" @bind-Value="@questionText" Label="Question" HelperText="Required" Required="true" OnlyValidateIfDirty="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto inline">Add</MudButton>
            </MudForm>
        </MudCardContent>
    </MudCard>

    //View results of active session
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">View Results</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @bind-IsValid="@success">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto inline">View</MudButton>
            </MudForm>
        </MudCardContent>
    </MudCard>
}



@code {

    [Parameter]
    public int? DirectCode { get; set; }

    [Inject] private IDialogService DialogService { get; set; }

    bool success, _generatingSession = false, dismissConf = false;
    private HubConnection? hubConnection;
    Session? session;


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    string sessionName, uname, questionText;

    private async void EndConfirmation()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Your session data is not saved. Save any poll results before ending the session. All connected users will be disconnected.",
            yesText: "Disconnect", cancelText: "Cancel");

        if (result == false)
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("EndSession", session.ID);
            }
            //Clean up user side
            session = null;
            Snackbar.Add("Session ended", Severity.Success);
        }

        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (DirectCode.ToString().Length == 4)
            if (hubConnection is not null)
                await hubConnection.SendAsync("RefreshSession", DirectCode);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/poll"))
            .Build();

        Snackbar.Add("Connection to poll endpoint established", Severity.Success);


        hubConnection.On<Session, string>("ReceiveSession", (s, msg) =>
        {
            session = s;
            Snackbar.Add(msg, Severity.Normal);
            RecieveSession();
        });
        hubConnection.On<string>("ReceiveMessage", (msg) =>
        {
            Snackbar.Add(msg, Severity.Info);
        });


        await hubConnection.StartAsync();
    }

    private async Task CreateSession()
    {
        if (hubConnection is not null)
        {
            _generatingSession = true;
            await hubConnection.SendAsync("CreateSession", sessionName, uname);
        }
    }

    void RecieveSession()
    {
        Console.WriteLine(session.ID);

        if (session.IsEmpty)
        {
            Snackbar.Add("Session creation failed", Severity.Error);
            _generatingSession = false;
            StateHasChanged();
        }
        else
        {
            _generatingSession = false;

            Console.WriteLine(session.Name);
            StateHasChanged();
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}