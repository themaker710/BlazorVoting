@page "/sessions"
@page "/sessions/{DirectCode:int}"
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using PollAppHosted.Client.Components;
@using PollAppHosted.Shared;

<PageTitle>Admin Dash</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Session Manager</MudText>
<MudText Class="mb-8">Prepare questions, view results, and send notifications from this page.</MudText>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

@if (session is null)
{

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">Create Session</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @bind-IsValid="@success">
                <MudTextField Class="inline" T="string" @bind-Value="@sessionName" Label="Session Name" Required="true" />
                <MudTextField Class="inline" T="string" @bind-Value="@uname" Label="Name" HelperText="Optional" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success || _generatingSession)" @onclick="@(async () => await CreateSession())" Class="ml-auto inline">
                    @if (_generatingSession)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Create</MudText>
                    }
                </MudButton>
            </MudForm>
        </MudCardContent>
    </MudCard>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
}
else
{
    @if (!dismissConf)
    {
        //Alert confirm
        <MudAlert Severity="Severity.Success" ShowCloseIcon="true" CloseIconClicked="(() => dismissConf = true)">
            <MudText>Creation Successful! Use code <b>@session.ID</b> or link <a href=$"https://hshsvoting.azurewebsites.net/response/{session.ID}">/response/@session.ID</a> to join.</MudText>
        </MudAlert>
    }
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">Session Info</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(async () => SessionAvaliablity())" Class="ml-auto inline">@((session.State == SessionState.Inactive) ? "Activate Session" : "Pause Session")</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@EndConfirmation" Class="ml-auto inline">End Session</MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudSimpleTable Style="overflow-x:auto">
                    <tbody>
                        <tr>
                            <td>Session Name</td>
                            <td>@session.Name</td>
                        </tr>
                        <tr>
                            <td>Connection Code</td>
                            <td>@session.ID</td>
                        </tr>
                        <tr>
                            <td>Connected Users</td>
                            <td>@session.users.Count(x => x.Role != UserStatus.Admin)</td>
                        </tr>
                        <tr>
                            <td>Creation Time</td>
                            <td>@session.creationTime.ToString("t")</td>
                        </tr>
                        <tr>
                            <td>Session Status</td>
                            <td>
                                @switch (session.State)
                            {
                                case SessionState.Inactive:
                                    <MudChip Color="Color.Warning" Variant="Variant.Filled" Class="mr-2">Inactive</MudChip>
                                    break;
                                case SessionState.Idle:
                                    <MudChip Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">Idle</MudChip>
                                    break;
                                case SessionState.Polling:
                                    <MudChip Color="Color.Warning" Variant="Variant.Filled" Class="mr-2">Polling</MudChip>
                                    break;
                                case SessionState.Ended:
                                    <MudChip Color="Color.Success" Variant="Variant.Filled" Class="mr-2">Ended</MudChip>
                                    break;
                            }
                        </td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        </MudCardContent>
    </MudCard>

    <MudDivider DividerType="DividerType.Middle" Class="my-6" />

    //Dynamic grid of questions with modal to add new ones
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4" GutterBottom="true">Questions</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(async () => await AddQuestion())" Class="ml-auto inline">
                <MudIcon Icon="add" />
                <MudText Class="ms-2">Add Question</MudText>
            </MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            @foreach (var question in polls)
            {
                <MudItem xs="12" sm="12" md="6" lg="4" xl="3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5" GutterBottom="true">Question @question.ID</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(async () => await EditQuestion(question.ID))" Class="ml-auto inline">
                                    <MudIcon Icon="edit" />
                                    <MudText Class="ms-2">Edit</MudText>
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@(async () => await DeleteQuestion(question.ID))" Class="ml-auto inline">
                                    <MudIcon Icon="delete" />
                                    <MudText Class="ms-2">Delete</MudText>
                                </MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudSimpleTable Style="overflow-x:auto">
                                <tbody>
                                    <tr>
                                        <td>Question</td>
                                        <td>@question.Question</td>
                                    </tr>
                                    <tr>
                                        <td>Answers</td>
                                        <td>
                                            @foreach (var answer in question.Options)
                                            {
                                                <MudChip Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">@answer.Name</MudChip>
                                            }
                                        </td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudCardContent>
}



@code {

    [Parameter]
    public int? DirectCode { get; set; }

    [Inject] private IDialogService DialogService { get; set; }

    private List<Poll> polls = new List<Poll>();

    bool success, _generatingSession = false, dismissConf = false;
    private HubConnection? hubConnection;
    Session? session;


    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    string sessionName, uname, questionText;

    private async void EndConfirmation()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Your session data is not saved. Save any poll results before ending the session. All connected users will be disconnected.",
        yesText: "Disconnect", cancelText: "Cancel");

        if (result == false)
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("EndSession", session.ID);
            }
            //Clean up user side
            session = null;
            Snackbar.Add("Session ended", Severity.Success);
        }

        StateHasChanged();
    }

    //Add a question to the list through the Question dialog component
    private async Task AddQuestion()
    {
        var parameters = new DialogParameters();
        parameters.Add("poll", new Poll() {ID = polls.Count});
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, DisableBackdropClick = true };
        var dialog = DialogService.Show<QuestionDialog>("Add Question", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            polls.Add((Poll)result.Data);
            Snackbar.Add("Question added", Severity.Success);
        }
    }

    //Edit a question in the list through the Question dialog component
    private async Task EditQuestion(int ID)
    {
        var parameters = new DialogParameters();
        parameters.Add("poll", polls.Find(x => x.ID == ID));
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, DisableBackdropClick = true };
        var dialog = DialogService.Show<QuestionDialog>("Edit Question", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            polls[polls.FindIndex(x => x.ID == ID)] = (Poll)result.Data;
            Snackbar.Add("Question edited", Severity.Success);
        }
    }

    //Delete a question from the list
    private async Task DeleteQuestion(int ID)
    {
        var result = await DialogService.ShowMessageBox("Warning", "Are you sure you want to delete this question?", yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            polls.Remove(polls.Find(x => x.ID == ID));
            Snackbar.Add("Question deleted", Severity.Success);
        }
        //Update the ID of each poll in the list
        for (int i = 0; i < polls.Count; i++)
            polls[i].ID = i;

    }


    private async void SessionAvaliablity()
    {
        if (session.State == SessionState.Polling)
            Snackbar.Add("Session is currently polling. Please end the poll before deactivating the session.", Severity.Error);
        else if (session.State == SessionState.Inactive)
            session.State = SessionState.Idle;
        else if (session.State == SessionState.Idle)
            session.State = SessionState.Inactive;

        if (session.State != SessionState.Polling)
            Snackbar.Add("Session state changed", Severity.Success);

        if (hubConnection is not null)
            await hubConnection.SendAsync("RefreshSession", DirectCode);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (DirectCode.ToString().Length == 4)
            if (hubConnection is not null)
                await hubConnection.SendAsync("PullSession", DirectCode);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/poll"))
        .Build();

        Snackbar.Add("Connection to poll endpoint established", Severity.Success);


        hubConnection.On<Session, string>("ReceiveSession", (s, msg) =>
        {
            session = s;
            Snackbar.Add(msg, Severity.Normal);
            RecieveSession();
        });
        hubConnection.On<string>("ReceiveMessage", (msg) =>
        {
            Snackbar.Add(msg, Severity.Info);
        });


        await hubConnection.StartAsync();
    }

    private async Task CreateSession()
    {
        if (hubConnection is not null)
        {
            _generatingSession = true;
            await hubConnection.SendAsync("CreateSession", sessionName, uname);
        }
    }

    void RecieveSession()
    {
        if (session.IsEmpty)
        {
            Snackbar.Add("Session creation failed", Severity.Error);
            _generatingSession = false;
        }
        else
            _generatingSession = false;
        StateHasChanged();
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    }
