@page "/response"
@page "/response/{DirectCode:int}"
@inject NavigationManager Navigation
@inject IDialogService DialogService
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using PollAppHosted.Shared;
@using PollAppHosted.Client.Components;

<PageTitle>Respond to Polls</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Voting Hub</MudText>
<MudText Class="mb-8">Connect to sessions and respond to polls from this page.</MudText>
<MudDivider />

@if (!IsConnected)
{
    <MudCard Outlined="true">
        <MudCardContent>
            <MudForm @bind-IsValid="@success">
                <MudTextField Class="inline" T="int" @bind-Value="@scode" Label="Session Code" HelperText="4 Digit Number" Required="true" OnlyValidateIfDirty="true" Validation="@(new Func<int, IEnumerable<string>>(SessionCodeForm))" />
                <MudTextField Class="inline" T="string" @bind-Value="@uname" Label="Name" HelperText="Optional" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" @onclick="@(async () => await JoinSession())" Class="ml-auto inline">Join</MudButton>
            </MudForm>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" GutterBottom="true">@session.Name</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@LeaveSession" Class="ml-auto inline">Disconnect</MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText>Session open since @session.CreationDate.ToString("t") | Connected since @connectionTime.ToString("t") | Session ID <b>@session.ID</b></MudText>
            @if (showConfirmation)
            {
                <MudAlert Severity="Severity.Info" ShowCloseIcon="true" CloseIconClicked="(() => CloseConfirmation())">You are connected to session @session.ID</MudAlert>
            }

        </MudCardContent>
    </MudCard>

    <MudDivider />
    @if (showResults)
    {
        //MudCard with result pie chart
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" GutterBottom="true">Results</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Justify="Justify.Center">
                    @foreach (Poll.PollOption option in pollResult.Value.poll.Options)
                    {
                        <MudItem Width="auto" Height="140px">
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" GutterBottom="true">@option.Name</MudText>
                                    <MudText>Number of Votes: @pollResult.Value.optionVotes[option.ID]</MudText>
                                    <MudText>Percentage of Votes: @((int)((pollResult.Value.optionVotes[option.ID]/pollResult.Value.totalVotes)*100))%</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" GutterBottom="true">Pie Chart</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Justify="Justify.Center">
                    <MudItem Width="auto" Height="140px">
                        <MudCard>
                            <MudCardContent>
                                <MudChart ChartType="ChartType.Pie" InputData="@ToDouble(pollResult.Value.optionVotes)" InputLabels="@ToSArray(pollResult.Value.poll.Options)"/>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }

    @if (activePoll != null)
    {
        //Poll display here
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" GutterBottom="true">@activePoll.Question</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Justify="Justify.Center">
                    @foreach (Poll.PollOption option in activePoll.Options)
                    {
                        <MudItem Width="auto" Height="140px">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => await Vote(option.ID)">@option.Name</MudButton>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
    else 
    {
        <MudAlert Severity="Severity.Normal">No active poll. You will be notified when a new poll becomes avaliable.</MudAlert>
    }

}






@code {

    [Parameter]
    public int? DirectCode { get; set; }

    //[Inject] private IDialogService DialogService { get; set; }

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private DateTime connectionTime;

    bool success, showConfirmation, showResults, IsConnected, HasVoted, visible;

    SessionInfo session = new SessionInfo();

    string uname;
    int scode;

    Poll? activePoll = null;
    PollResult? pollResult = null;

    void CloseConfirmation() => showConfirmation = false;

    double[] ToDouble(Dictionary<int, int> dict)
    {
        double[] result = new double[dict.Count];
        for (int i = 0; i < result.Length; i++)
            result[i] = dict[i];
        return result;
    }
    static string[] ToSArray(List<Poll.PollOption> opp)
    {
        string[] result = new string[opp.Count];
        for (int i = 0; i < result.Length; i++)
            result[i] = opp[i].Name;
        return result;
    }

    private IEnumerable<string> SessionCodeForm(int code)
    {
        if (code.ToString().Length != 4)
            yield return "Code must have 4 digits between 0-9";

    }

    protected override async Task OnParametersSetAsync()
    {
        if (DirectCode.ToString().Length == 4)
            await DirectConnect();
    }

    async Task DirectConnect()
    {
        var parameters = new DialogParameters { ["DirectCode"] = DirectCode };

        var dialog = DialogService.Show<ConnectionConfirmation_Dialog>("Delete Server", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            uname = result.Data.ToString();
            await JoinSession();
        }

    }
    void BeginSession()
    {
        if (session.IsEmpty) return;

        Console.WriteLine("The code is: " + scode);
        Console.WriteLine("The username is: " + uname);

        showConfirmation = true;
        IsConnected = true;

        connectionTime = new DateTime();

        //Check if there is an active poll

    }

    async Task Vote(int id)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Vote", id);
            HasVoted = true;
        }
    }

    void EndPoll(PollResult pr)
    {
        activePoll = null;
        pollResult = pr;
    }

    void LeaveSession()
    {

        IsConnected = false;
        scode = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/poll"))
            .Build();
        //Add all recieving methods here
        hubConnection.On<string>("ReceiveMessage", (msg) =>
        {
            Snackbar.Add(msg, Severity.Info);
        });

        //Recieve poll from hub and display it
        hubConnection.On<Poll>("ReceivePoll", (poll) =>
        {
            activePoll = poll;
        });
        hubConnection.On<PollResult>("ReceivePollResults", (pollr) =>
        {
            EndPoll(pollr);
        });

        //Recieve session from hub and display it
        hubConnection.On<Session?, string>("ReceiveSession", (s, msg) =>
        {
            Snackbar.Add(msg, (s == null) ? Severity.Error : Severity.Normal);
            session = s;
            BeginSession();
        });
        hubConnection.On<Session, string>("ReceiveSessionAdmin", (s, msg) =>
        {
            Snackbar.Add(msg, Severity.Info);
            Navigation.NavigateTo("sessions/" + s.ID);
        });
        hubConnection.On("EndSession", () =>
        {
            Snackbar.Add("Session master closed the session.", Severity.Info);
            IsConnected = false;
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinSession()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinSession", scode, uname);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
