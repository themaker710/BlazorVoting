@inherits LayoutComponentBase
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudTooltip Text="Status">
            <MudAvatar Color="@((IsConnected) ? Color.Success : Color.Warning)" Variant="Variant.Filled" Size="Size.Medium" @onclick="@StateHasChanged">
                @if (IsConnected)
                {
                    <MudIcon Color="Color.Dark" Icon="@Icons.Material.Filled.SignalWifi4BarLock" Size="Size.Medium" />
                }
                else
                {
                    <MudIcon Color="Color.Dark" Icon="@Icons.Material.Filled.SignalWifiOff" Size="Size.Medium" />
                }
            </MudAvatar>
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">HSHS Voting App</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-6 pt-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true, refreshing = false;
    private HubConnection? hubConnection;

    bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/poll"))
            .Build();
        //Add all recieving methods here
        hubConnection.On<string>("ReceiveMessage", (msg) =>
        {
            Snackbar.Add(msg, Severity.Info);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}